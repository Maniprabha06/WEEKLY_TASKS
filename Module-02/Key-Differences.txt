Key-Differences:
1.Variable Handling:
Bash:
    - Assignment : variable=value (No spaces)
    - Access : $variable

    bash
    #!/bin/bash
    name="Prabha"
    echo "Heyyy, $name"

    - Simple and consistent.
    - No confusion with quoting and spacing.

Csh:
    - Assignment : set variable =  value
    - Access : $variable
    - If it is a single word no quotes needed ..if it is more than one it has to be quoted.

    Csh
    #!/bin/csh
    set name = Prabha
    echo "Heyyy, $name"

    - Must use space around =.
    - Strings with spaces must be quoted.
    - Might be confusing.


2. Control Structures:
Bash:
    - uses cleaner and modern syntax.
    - Easier to write complex logic.

    control_bash.sh:
    #!/bin/bash
    for file in *; do
        if [ -f "$file" ]; then
            echo "$file is a file"
        elif [ -d "$file" ]; then
            echo "$file is a directory"
        else
            echo "$file is something else"
        fi
    done

    - it has clear syntax and no confusions.
    - even a space missing can leads to issue.

Csh:
    - Works well for basic control flow.
    - Syntax is very rigid , which can be harder to maintain complex logics.

    Control_csh.csh
    #!/bin/csh
    foreach file (*)
        if (-f $file) then
            echo "$file is a file"
        else if (-d $file) then
            echo "$file is a directory"
        else 
            echo "$file is something else"
        endif
    end

    - older style
    - can be confusing for complex logic.

3.Array Handling:
Bash:
    - Supports array with a more robust syntax.
    - Array can be easily created and accessed.

    array_bash.sh
    #!/bin/bash
    places=("India" "London" "Russia" "Europe")
    echo "Print all places ${places[@]}"
    echo "Print first place ${places[0]}"
    echo "Print second place ${places[1]}"
    echo "print number of places : ${#places[@]}"

    for place in "${places[@]}"; do
        echo "place : $place"
    done


Csh :
    - limited array support

    array_csh.csh:
    #!/bin/csh
    set places = (India London Africa Europe Finland)
    echo "print all places $places"
    echo "print first place $places[1]"
    echo "print second place $places[2]"
    echo "print number of places : ${#places}"

    foreach place ($places)
        echo "place : $place"
    end

4. Scripting Features:
Bash:
    - Has more advanced features like functions, arrays and error handling etc.
    - Supports more complex logic with if-else statements and loops.

    nano feature_bash.sh
    #!/bin/bash

    count_lines()
        if [ ! -f "$1" ]; then
            echo "Error file '$1' not found!"
            return 1
        fi

        lines=$(wc -l < "$1")
        echo "Number of lines in '$1' is : $lines lines"

    count_lines "$1"

    chmod +x feature_bash.sh
    echo -e "Line1\nLine2\nLine3\nLine4\n" > test.txt
    ./feature_bash.sh test.txt

Csh:
    - Has limited features      
    - Does not support functions, arrays and error handling etc.

    nano feature_csh.csh
    #!/bin/csh
    set filename = "$1"
    if (! -f "$filename") then
        echo "Error : '$filename' not found"
    endif
    set lines = `wc -l < "$filename"`
    echo "Number of lines in '$filename' is : $lines lines"

    - chmod +x feature_csh.csh
    - echo -e "Line1\nLine2\nLine3\nLine4\n" > example.txt
    - ./feature_csh.csh example.txt


5. History and Interactive use:
Bash:
    - Bash is the default ubuntu shell
    - History - with numbers,timestamps(with config).

    echo "History and Interactive use in Bash"
    ls //list the files and directory
    pwd //path of working directory
    whoami //shows which user
    history // shows history
    !! //runs previous command
    !1 //runs first command in history
    !-1 //runs last command in history
    !n //runs nth command in history
    alias prabha='ls -l' //alias name
    prabha // list the files (runs ls -l command)
    unalias prabha

Csh:
    - was historically used For interactive use of commands we can prefer Csh.
    - History - with numbers(simple).
    
    in termianl type csh first it will show like %
    csh
    echo "History and Interactive use in Csh"
    set history = 100
    ls //list the files and directory
    pwd //path of working directory
    whoami //shows which user
    history // shows history in a simple way
    !! //runs previous command
    !1 //runs first command in history
    !-1 //runs last command in history
    !n //runs nth command in history
    alias prabha 'ls -l' //alias name
    prabha // list the files (runs ls -l command)
    unalias prabha
    exit //moves to default shell bash